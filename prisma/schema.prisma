datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  AGENCY_OWNER
  AGENCY_ADMIN
  SUBACCOUNT_USER
  SUBACCOUNT_GUEST
}

enum Icon {
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
}

model User {
  id           String         @id @default(uuid())
  name         String
  avatarUrl    String         @db.Text
  email        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  role         Role           @default(SUBACCOUNT_USER)
  agencyId     String?
  Agency       Agency?        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  Permissions  Permissions[]
  Tickets      Ticket[]       @relation("AssignedTickets")

  @@index([agencyId])
}

model Agency {
  id               String                @id @default(uuid())
  name             String
  agencyLogo       String                @db.Text
  companyEmail     String                @db.Text
  companyPhone     String
  whiteLabel       Boolean               @default(true)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  users            User[]
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  SubAccount       SubAccount[]
  Notifications    Notification[]
}

model Permissions {
  id                   String     @id @default(uuid())
  email                String
  User                 User       @relation(fields: [email], references: [email], onDelete: Cascade)
  subAccountId         String
  SubAccount           SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  access               Boolean    @default(false)
  canCreateAgency      Boolean    @default(false)
  canCreateSubAccount  Boolean    @default(false)
  canDeleteAgency      Boolean    @default(false)
  canDeleteSubAccount  Boolean    @default(false)
  canUpdateAgency      Boolean    @default(false)
  canUpdateSubAccount  Boolean    @default(false)

  @@index([subAccountId])
  @@index([email])
}

model SubAccount {
  id               String        @id @default(uuid())
  name             String
  subAccountLogo   String        @db.Text
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  companyEmail     String        @db.Text
  companyPhone     String
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  agencyId         String
  Agency           Agency        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  Permissions      Permissions[]
  Pipeline         Pipeline[]
  Tags             Tag[]
  Notifications    Notification[]
  Triggers         Trigger[]
  Automations      Automation[]

  @@index([agencyId])
}

model Tag {
  id           String   @id @default(uuid())
  name         String
  color        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  subAccountId String
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Tickets      Ticket[]

  @@index([subAccountId])
}

model Pipeline {
  id            String    @id @default(uuid())
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  subAccountId  String
  SubAccount    SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  lanes         Lane[]

  @@index([subAccountId])
}

model Lane {
  id          String    @id @default(uuid())
  name        String
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  pipelineId  String
  Pipeline    Pipeline  @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  Tickets     Ticket[]

  @@index([pipelineId])
}

model Ticket {
  id            String    @id @default(uuid())
  name          String
  description   String?   @db.Text
  value         Decimal?
  order         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  laneId        String
  Lane          Lane      @relation(fields: [laneId], references: [id], onDelete: Cascade)
  Tags          Tag[]
  assignedUserId String?
  Assigned      User?     @relation("AssignedTickets", fields: [assignedUserId], references: [id], onDelete: SetNull)

  @@index([laneId])
  @@index([assignedUserId])
}

enum TriggerTypes {
  CONTACT_FORM
}

model Trigger {
  id           String       @id @default(uuid())
  name         String
  type         TriggerTypes
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  subAccountId String
  SubAccount   SubAccount   @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Automations  Automation[]

  @@index([subAccountId])
}

model Automation {
  id                 String               @id @default(uuid())
  name               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  triggerId          String?
  published          Boolean              @default(false)
  Trigger            Trigger?             @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  subAccountId       String
  SubAccount         SubAccount           @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Action             Action[]
  AutomationInstance AutomationInstance[]

  @@index([triggerId])
  @@index([subAccountId])
}

model AutomationInstance {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  active       Boolean    @default(false)

  @@index([automationId])
}

enum ActionType {
  CREATE_CONTACT
}

model Action {
  id           String     @id @default(uuid())
  name         String
  type         ActionType
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  order        Int
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  laneId       String     @default("0")

  @@index([automationId])
}

model Notification {
  id            String    @id @default(uuid())
  description   String    @db.Text
  agencyId      String?
  subaccountId  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Agency        Agency?   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount    SubAccount? @relation(fields: [subaccountId], references: [id], onDelete: Cascade)

  @@index([agencyId])
  @@index([subaccountId])
}